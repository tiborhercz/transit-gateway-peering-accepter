AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  TransitGatewayId:
    Type: String
  PeerTransitGatewayId:
    Type: String
  PeerRegion:
    Type: String

Resources:
  TransitGatewayPeeringAttachmentEuWest1ToEuCentral1:
    Type: AWS::EC2::TransitGatewayPeeringAttachment
    Properties:
      PeerAccountId: !Sub "${AWS::AccountId}"
      PeerRegion: !Ref PeerRegion
      PeerTransitGatewayId: !Ref PeerTransitGatewayId
      TransitGatewayId: !Ref TransitGatewayId

  Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: lambda-code-bucket-binx-3252
        S3Key: lambda-code.zip
      FunctionName: custom-resource
      Handler: index.handler
      Role: !GetAtt ExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
  CustomResource:
    Type: Custom::Function
    Properties:
      ServiceToken: !GetAtt Function.Arn
      TransitGatewayID: !GetAtt TransitGatewayPeeringAttachmentEuWest1ToEuCentral1.TransitGatewayAttachmentId

  Logs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/custom-resource
      RetentionInDays: 30

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: admin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: ['*']
        - PolicyName: custom-resource-execution-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogGroup
                  - logs:PutLogEvents
                Resource: !GetAtt Logs.Arn
